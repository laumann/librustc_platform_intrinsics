
#![feature(slice_concat_ext)]
#![feature(ascii_ctype)]

#[macro_use]
extern crate lazy_static;

extern crate serde_json;
extern crate regex;

pub mod parser;
pub mod typespec;

use serde_json::Value;
use std::io::prelude::*;
use std::path::{Path, PathBuf};
use std::fs::File;
use std::slice::SliceConcatExt;
use parser::*;

pub use parser::*;

pub fn generate(p: Platform, dir: &Path) {
    let mut file_stem = dir.join(&p.file_stem);
    println!("generate file name {:?}", file_stem);
    file_stem.set_extension("rs");

    let output = render(&p);
    let mut file = File::create(file_stem).expect("create file failed");
    file.write_all(output.as_bytes()).unwrap();
}

static HEADER: &'static str = r#"
// Copyright 2015 The Rust Project Developers. See the COPYRIGHT
// file at the top-level directory of this distribution and at
// http://rust-lang.org/COPYRIGHT.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

// DO NOT EDIT: autogenerated by etc/platform-intrinsics/generator.py
// ignore-tidy-linelength

#![allow(unused_imports)]

use {Intrinsic, Type};
use IntrinsicDef::Named;

// The default inlining settings trigger a pathological behaviour in
// LLVM, which causes makes compilation very slow. See #28273.
#[inline(never)]
pub fn find(name: &str) -> Option<Intrinsic> {
"#;

fn render(p: &Platform) -> String {
    let body_start = format!(r#"
    if !name.starts_with("{0}") {{ return None }}
    Some(match &name["{0}".len()..] {{"#,
                             p.platform_prefix());

    let body = p.generate();

    let body_end = r#"

        _ => return None,
    })
}
"#;

    concat(&[HEADER, &body_start, &body, body_end])
}



//
fn concat(strs: &[&str]) -> String {
    let mut output = String::new();
    for s in strs {
        output.push_str(s);
    }
    output
}
